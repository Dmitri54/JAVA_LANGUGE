/**
 * Урок 4. ООП: Обобщения
 * ============================================================================================
 * План урока:
 * 1. Том, что это и зачем
 * 2. Параметризованные типы. Классы и Методы
 * 3. Построение иерархий обобщений
 * 4. Примеры использования
 * 5. Итоги
 * ===============================================================================================
 * Обобщение:
 * Жизненная необходимость «Type save».
 * 
 * Ошибки компиляции лучше ошибок выполнения.
 * 
 * Переиспользование кода «Reusable Code»
 * Не нужно писать много одинакового кода, привязку типа можно вынести как уровень абстракции*.
 * 
 * Проектирование уровня экземпляров класса
 * Не работает для статики.
 * ===============================================================================================
 * Примеры:
 * Ex001 - если не привести к нужному типу, то можно будет к списку строк добавить и число.
 * Это вызовет ошибку, т.к. при работе нам понадобиться длинна списка и его элементов, а у числа 
 * нет такого парамьетра.
 * -----------------------------------------------------------------------------------------------
 * Ex002 - Есть у меня какой-то рабочий. Он может содержать какие-то поля. В качестве индитификатора 
 * может быть число. Если Integer, то таких работников может быть четь больше чем 2 миллиарда.
 * Вопрос: Что делать если в рамках моей системы нужно гораздо большее количество?
 * Создам индитификатор, который будет принимать какой-то тип за ранее не известный и в момент
 * создания экземпляра "Гвоздик" я буду указывать, что есть "Гвоздик", который будет использовать 
 * в качестве индитификатора числа и есть "Гвоздик" - в качестве индификатора строки.
 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 * Параметрический полиморфизм - продумывать иерархии с типами на перед не известными, а просто 
 * указывая, что будет какое-то поле, какого-то типа, но знаю как с ним работать.
 * +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 * В качестве обобщения можно использовать не один тип, а множество.
 * MultiParameterized.java
 * Важно не переборщить с Обобщениями!
 * ------------------------------------------------------------------------------------------------
 * Ex003 - Есть некая каллекция наполненная элементами. 
 * Далее я описываю класс Methods, в котором я хочу описать метод, которой возвращает элемент по 
 * индексы в независимости от типа. Чтобы не писать, для каждого типа метод, опишу статический метод,
 * который будет завязан на каком-то общем типе, наперед неизветном.
 * ------------------------------------------------------------------------------------------------
 * Ex004 - Тут представлена идея, чтобы показать как классический полиморфизм не всегда может 
 * справиться с задачей которую мне нужно решить.
 * V1 - Создать хранилище аудо и видео файлов.
 * Условно это может быть папка на ПК, в которую, можно добавть только аудио или только видео формат,
 * или это какой-то аудио или видео плеер.
 * V4 - если я захочу объединить два репозитория.
 * ------------------------------------------------------------------------------------------------
 * Ex005 
 * ------------------------------------------------------------------------------------------------
 * Ex006 - к примеру есть несколько программистов разного уровня. Я хочу организовать некую олимпиаду.
 * На котору можно подать заявку отдульной командой. 
 * Вопрос: Как этот функционал описать кодом?
 * ------------------------------------------------------------------------------------------------
 * Ex007 - решает проблему, Обобщением.
 * ------------------------------------------------------------------------------------------------
 * Ex008 - Обобщение.
 */

package OOP_JAVA.lessons.les_04;

public class Program {
    
}
