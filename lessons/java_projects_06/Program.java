// Урок 6. Хранение и обработка данных ч3: множество коллекций Set.
/**
 * План занятия:
 * 1. Иерархия Set и определения.
 * 2. Обзор функционала HashSet.
 * 3. Обзор функционала LinkedHashSet.
 * 4. Обзор функционала SortedSet.
 * 5. Дерево в программировании.
 * 6. Обзор функционала TreeSet.
 * 7. Введение в создание собственных типов.
 * 8. equals, hashCode, compareTo и их назначение.
 * =====================================================================================================
 *  Set - построен по примеру Map.
 * Если для Map было справедливо, что у него хранилось пара ключ: значение, то для Set будет только ключ,
 * притом значение будет заполняться какой-то константой, т.е. работа ведется только с ключами.
 *  
 * -----------------------------------------------------------------------------------------------------
 * Иерархия коллекций
 * 
 *           Set
 *         /     \
 *       |/       \|
 *   HashSet     SortedSet
 *      |           |
 *     \|/         \|/
 *LinkedHashSet  NavigableSet
 *                  |
 *                 \|/
 *                TreeSet
 * -----------------------------------------------------------------------------------------------------
 * Set 
 * ● Коллекции, содержащие уникальные элементы.
 * ● Быстрая работа с данными.
 * ● «Основан» на Map’ах без пары.
 * ● Порядок добавления не хранится.
 * ------------------------------------------------------------------------------------------------------
 * HashSet
 * isEmpty() – проверка на пустоту.
 * add(V) – добавление элемента в коллекцию.
 * remove(V) – удаление элемента из коллекцию.
 * contains(V) – проверка на включение элемента в коллекции.
 * clear() – удаление всех элементов коллекции.
 * size() – возвращает количество элементов коллекции.
 * 
 * Пример: Ex001_HashSet
 * -------------------------------------------------------------------------------------------------------
 * HashSet как синоним множества.
 * addAll(Coll) – объединение множеств.
 * retainAll(Coll) – пересечение множеств.
 * removeAll(Coll) – разность множеств.
 * 
 * Пример: Ex002_MathSet
 * -------------------------------------------------------------------------------------------------------
 * HashSet как синоним множества
 * first()
 * last()
 * headSet(E)
 * tailSet(E)
 * subSet(E1, E2)
 * -------------------------------------------------------------------------------------------------------
 * TreeSet
 * ● В основе HashMap.
 * ● Упорядочен по возрастанию.
 * ● null’ов быть не может
 * 
 * Пример: Ex003_TreeSet
 * -------------------------------------------------------------------------------------------------------
 * LinkedHashSet
 * ● В основе HashMap.
 * ● Помнит порядок.
 * Использовать, когда нужен HashSet с запоминанием порядка элемента!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * 
 * Пример: Ex004_LinkedHashSet
 * 
 * isEmpty() – проверка на пустоту.
 * add(V) – добавление элемента в коллекцию.
 * remove(V) – удаление элемента из коллекцию.
 * contains(V) – проверка на включение элемента в коллекции.
 * clear() – удаление всех элементов коллекции.
 * size() – возвращает количество элементов коллекции.
 * =====================================================================================================
 * Введение в создание собственных типов.
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * Java является объектно-ориентированным языком.
 * 
 * Программа, написанная на Java, должна соответствовать парадигме объектно-ориентированного программирования.
 * 
 * Следует понимать, что принципы ООП не просто определяют структуру программы. 
 * Это некий фундаментальный подход, с которым нам предстоит разобраться.
 * 
 * Спагетти-код – код, в котором данные связаны с методами для их обработки и в итоге может получиться так,
 * что отдельные ветви алгоритма переплетаются, образуя запутанный клубок, в котором невозможно разобраться.
 * --------------------------------------------------------------------------------------------------------
 * Решение проблемы получило название объектно-ориентированное программирование или 
 * объектно-ориентированное проектирование или ООП.
 * 
 * При использовании данного подхода, упорядочивание кода базируется на объединении данных, 
 * с одной стороны, и методов для обработки этих данных, с другой стороны, в одно целое. 
 * Это «одно целое» в ООП называется экземпляром класса.
 * 
 * Вся программа при этом имеет блочную структуру, что существенно упрощает анализ кода и 
 * внесение в него изменения.
 * 
 * ООП – искусственный прием, в большинстве случаев не зависящий, от языка программирования.
 * --------------------------------------------------------------------------------------------------------
 * Если говорят, что разработка идет с использованием ООП – это говорит о том, что используются классы 
 * и экземпляры этих классов.
 * 
 * Каждый экземпляр класса определяется общим шаблоном, который называется классом.
 * 
 * В рамках класса задается общая структура, на основе которой затем создаются экземпляры.
 * 
 * Данные, относящиеся к классу, называются полями класса, а код для их обработки — методами класса.
 * --------------------------------------------------------------------------------------------------------
 * Примеры экземпляров класса:
 * Автомобиль – Lada 2107 UIN 123123123, S/N 789789789 // Да.
 * Здание – Дом по адресу г.Москва ул. Ленина 21к1 // Да.
 * Ученик – Сергей Камянецкий, 51 МиИ, СмолГУ // Да.
 * Мобильный телефон – Siemens CX60 IMEI 1234520032022 // Да.
 * Геометрическая фигура – додекаэдр // Не является экземпляром класса.
 * Работник – Смиронова Т.В. 14.02.1994, ID 728, Компания GeekBrains // Да.
 * Котики – Барсик // Нет
 * --------------------------------------------------------------------------------------------------------
 * Пример ООП в Java: Worker.java и Ex001_Program.java
 * 
 */