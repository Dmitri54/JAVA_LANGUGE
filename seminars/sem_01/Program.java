/**
 * Урок 1. Знакомство с языком программирования Java.
 * Я сейчас работаю в VSC, можно работать на idea (сборщик мавен).
 * 
 * В Java все объекты являются объектом, поэтому каждый раз создается class.
 */
// ===============================================================================================
// package seminars.sem_01;

// import java.util.Arrays;
// import java.util.Random;

// public class Program { // Название класса Program.
// 
//     public static void main(String[] args) { // Точка входа, для запуска программы.
//         // public - заначит, что метод main виден снаружи класса, т.е. это значит, что 
//         // при сборке программы компилятор увидет class program и в нем метод main.
//         // static - говорит о том, что main можно вызывать не создавая элемент на базе класса.
//         // Можно просто написать название класса поставить точку и вызвать напрямую main (Program.main();)
//         // В Java я обязательно должен писать, что возвращает метод (void - ничего, т.е. ничего не возварает).
//         // Если функция возвращает целое число пишу int.
//         // public static void main(String[] args) - это называется сигнатура. 
//         // String[] args - это массив строк (переменные), которые принимает метод.
//         // Метод, в котором указал возвращаемый параметр типо int, то нужно написать return.
//         System.out.println("Hello World!"); 
//         // System. - Это вызов библиотеки, чтобы взоимодействовать с консолью, т.к. консоль отдельная программа.
//         // out. - далее вызывая функцию (out), у которой уже есть функция print.
//         // println() - тут ln - это перенос стороки при выводе в консоль.
//         // print() - печать в одну линию.
//         // "Hello World!" - пишу в "" - т.к. это строка.   
//     }   
// }
// ==============================================================================================
// Пробежим по приметивным типам данных (boolean, int, short, long и т.д. float, double, Char).
// Java жестко типизированна и нельзя просто написать x = 0;


/**
 * Program
 */
// public class Program {

//     public static void main(String[] args) {
//         int x; // 32bit signed. Создание переменной, не обязательно, что то записывать сразу в неё.
//         long l;   // 64bit signed. (signed - знак (+/-)).
//         float f = 0.0f; // 32bit.
//         double d = 0; // 64bit.

//         //byte, short - очень редко используются (8, 16 bit).

//         char c = 'a'; // 16bit unsigned. Хранит букву. В char записывается не буква, а индекс из таблицы всех букв и символов.
//         // т.е. 'a' - это число!
//         x = 'f'; // 'f' - это не буква не строка, а ЧИСЛО.
        
//         boolean b = true; // Хранит в себе true или false.
        
//         // String - пишут с большой буквы, т.к. это не приметивный тип, это класс.
//         String str = "Кофеб, дерево, кабан!"; // Строка.
//         String str1 = 'f'; // ТАк нельзя, т.к. я пытаюсь записать в строку число ('идекс буквы в таблице').

//         // x = f; // так запихать объект типа float в int нельзя.
//         x = (int)f; // Динамическое привидение типов. Так можно привести переменную типа float к типу int (дробная часть будет отброшена).
//         x = (int)d; 

//     }
// }
// ===============================================================================================
/**
 * Массивы.
 * Массивы в Jave статические, т.е. если я задал размер массива изменить его я уже не могу.
 * Массив может быть стобран из любого приметивного типа и из строк тоже.
 * 
 */

// import java.util.Arrays; 
 /**
  * Program
  */
//  public class Program {
 
//     public static void main(String[] args) {
        
//         // int[] ints; // Так писать нельзя, нужно всегда выделять память.
//         int[] ints = new int[10]; // Инициализация одномерго массива.
//         // int[][] ints1 = new int[10][10]; // Двумерный массив.
//         // int[][][] ints2 = new int[10][10][10]; // Трехмерный и т.д.
//         // ints[0] = 0; // Обращение к элементу массива.

//         for (int i = 0; i < ints.length; i++) {
//             ints[i] = (int) (Math.random()*100); // Заполню массив случайными числами.
//             // Math. - это библиотека математика.
//             // random() - метод, возвращает число в диапозоне от 0 до 1, в формате double.
//             // Чтобы получилось дописал (int).
//             // Чтобы получить не 0, умножил на 100.

            
//         } // Если я хочу пробежаться по массиву, то запускаю цикл.
//         // int i = 0; - это счетчик, ставлю равным 0. Назвать счетчик можно как угодно.
//         // i < 10; - ограничение до какого момента будет работать цикл.
//         // i++ - что будет делаться со счетчиком каждую итерацию.
//         // далее блок кода {}.

//         // System.out.println(ints); // [I@36baf30c - это внутреннее имя объекта.
//         System.out.println(Arrays.toString(ints)); // [53, 19, 16, 20, 21, 66, 27, 89, 78, 15]

//     }
//  }
// ----------------------------------------------------------------------------------------------
// Генератор случайных чисел.

// import java.util.Arrays;
// import java.util.Random;
/**
 * Program
 */
// public class Program {

//     public static void main(String[] args) {
//         int[] ints = new int[10];
//         for (int i = 0; i < ints.length; i++) {
//             ints[i] = new Random().nextInt(500); // Этот генератор случайных чисел БЫСТРЕЕ. от 0 до 499. 
//             // Когда я хочу сохранить новое значение в массив ints с индексом i, я создаю временный анонимный 
//             // объект, который является экземпляром класса Random(). и у него вызываю метод nextInt() с 
//             // параметром 500. После, когда дошел до ; указатель на временный анонимный объект стирается и я 
//             // иду на следующий шаг и заного создаю анонимный временный объект. 
//             // Так писать не очень правильно!!!
//         }
//         System.out.println(Arrays.toString(ints)); // [149, 466, 294, 269, 367, 141, 175, 430, 445, 17]
//     }
// }
// -----------------------------------------------------------------------------------
// import java.util.Arrays;
// import java.util.Random;
// /**
//  * Program
//  */
// public class Program {

//     public static void main(String[] args) {
//         int[] ints = new int[10];
        
//         Random rnd = new Random(); // Нужно писать так. Объявление объекта типа Random.
//         for (int i = 0; i < ints.length; i++) {
//             ints[i] = rnd.nextInt(500);
//         }
//         System.out.println(Arrays.toString(ints));

//         // Ещё немного про массивы:
//         // ints[11] = 6; // Выдаст ошибку, т.к. длинна массива 10, а я обращаюсь к 11 элементу, а его нет.
//         // У массивов статичный размер, поэтому так просто изменить его нельзя.
//         int[] tmp = new int[ints.length+1];
//         tmp[0] = 5; // Этот элемент я добавляю в новый массив первым.
//         for (int i = 1; i < tmp.length; i++) {
//             tmp[i] = ints[i-1]; // Тут я добавляю элементы из старого массива в новый.
//         }
//         ints = tmp;
//         System.out.println(Arrays.toString(ints)); // [5, 305, 299, 186, 197, 46, 256, 150, 88, 88, 290]

//         // Integer. - это класс-обертка, т.к. после него я могу добавить через точку метод.
//         // Самый часто используемый это String.
//         System.out.println(String.valueOf(4.2f)); // 4.2
//         // .valueOf(0) - это преобразователь любых типов к строке.
//         // Integer.parseInt("2135");
//         // .parseInt(); - преобразует строковое представление числа в число.
//         // System.out.println(Integer.toBinaryString(1619)); // 11001010011
//         // .toBinaryString(0) - преобразует десятиричное предаставление в двоичное. 
//         // Причем двоичное представление от старшей единицы.
//         // Integer.toBinaryString(1619) - это уже строка, можно нажать точку и применить метод.
//         System.out.println(Integer.toBinaryString(1619).length()); // 11
//     }
// }
// -------------------------------------------------------------------------------------------
/**
 * String - это очень круто метод, тип данных.
 */
 
// import java.util.Arrays;
// /**
//  * Program
//  */
// public class Program {

//     public static void main(String[] args) {
        
//         String str = "Кофе, Дерево, Кабан!"; 
//         // Строка не изменяемая, после создания нельзя добавить или убрать элемент.
//         str += "!"; // Это создание новой строки, в которой будет на один элемент больше. 
//         // И далее указатель со строки str будет переоадресован на новую строку.
//         // String str = "кофе, дерево, кабан!"+" Дорога, степь"; // Тоже самое.
//         System.out.println(str.toLowerCase()); // кофе, дерево, кабан!!
//         // .toLowerCase(); - приведет строку к маленьким буквам.
//         // .toUpperCase(); - приведет строку к большим буквам.
//         // .replaceFirst(str, str); - заменит первый символ.
//         // .replaceAll(str, str); - заменит все символы встречающиеся в строке.
//         // .split(str); - делит входящую строку по разделителю.
//         System.out.println("Hi ".repeat(10)); // Hi Hi Hi Hi Hi Hi Hi Hi Hi Hi 
//         // Java уже видет, что "Hi" это строка, поэтому можно применять к ней методы сразу.

//         System.out.println(str); // Кофе, Дерево, Кабан!!
//         // Методы, которые есть у String, они не меняют основную строку, они возвращают 
//         // новую скорректированную строку.

//         String[]  splitStr = str.split(" ");
//         for (int i = 0; i < splitStr.length; i++) {
//             if (splitStr[i].contains(",") | splitStr[i].contains(".") | splitStr[i].contains("!"))
//             // splitStr - это массив, поэтому выбираю splitStr[i] - это уже string.
//             // .contains(); - метод (contains - содержит внутри себя) применяется к строке, если содержит то true, если нет -false.
//             // Если .contains(); содержит (,) или (.) или (!), то я попадаю в тело условия. | - или, проверит все условия.
                 
//             // .equals(); - означает равно. Строки нельзя сравнивать через просто равно.
//             // Примет: if ("werghy" == "wew") - так нельзя, т.к. Java будет сравнивать объекты, т.е. ссылки 
//             // на эти объекты, а они всегда разные.
//             // if ("1".equals("2"))  - можно сравнивать строки через метод .equals() - и он вернет true/false, 
//             // если строка равна первая строка равна или не равна второй строке.
            
//             splitStr[i] = splitStr[i].substring(0, splitStr[i].length()-1); // [Кофе, Дерево, Кабан!]
            
//         }
//         System.out.println(Arrays.toString(splitStr)); // [Кофе,, Дерево,, Кабан!!] 
//         // Появились лишнии символы (,). Пишу код выше, чтобы их не было.
        
//     }
// }
