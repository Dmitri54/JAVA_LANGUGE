/**
 * Урок 2. Принципы ООП Абстракция и интерфейсы. Пример проектирования
 * ===================================================================================================
 * Пробежимся по тому, что я изучил.
 * 
 * Инкаплусяция - это основа ООП.
 * Это возможность складывать в одну сущность разные параметры и программы.
 * Это когда я создаю класс и в нем какие-то поля (Human).
 * Наследование (Archer).
 * abstract class (Human) - это класс, который абстрактно описывает все сущности, но ещё он не готов, для работы.
 * XBowMan.java
 * Сделать два консруктора, один гибкий - передовать ему все параметры, это не удобно - параметров много.
 * Во втором консрукторе, всего один параметр (name), а остальные я заранее посчитал и записал.
 * Поэтому, когда я создаю XBowMan, то только, для того, чтобы инициализировать конструктор по умолчанию.
 * Archer я сделал, чтобы обобщить всех лучников, а потом иметь возможность их добавлять. 
 * Добавлю снайпера (sniper). 
 * 
 * super - это обращение к переменной объявленной в super class.
 * this - это обращение к переменной объявленной в этом class.
 * private - защитит параерт от изменений.
 * С ним можно работать в пределах класса в котором прописан.
 * static - это глобальная переменная по всех программе. Я не могу тогда его менять.
 * -------------------------------------------------------------------------------------------------------
 * Names.java
 * Чтобы не придумывать номера можно создать enum, в место class.
 *  ==================================================================================================
 * Интерфейс
 * interface - список методов, которые обязательно должны быть у методов реализующих этот интерфейс.
 * gameInterface.java
 *
 * public abstract class Human implements gameInterface.
 * Добавив implements gameInterface к Human, Java не требует создавать методы в Human, т.к. это abstract class
 * я не могу его реализовать, как и Archer, поэтому нет ошибки и не нужно реализовывать в нем методы interface.
 * А вот XBowMan и Sniper - это уже готовые к реализации классы, я могу делать объекты на их основе.
 * В них Java потребует, чтобы я реализовал методы interface.
 * Тут два подхода. 
 * Либо я делаю реализацию в Main.java
 * Дописываю implements GameInterface 
 * Пишу @Override - это больше для меня, чтобы знать что этот метод описан в другом классе.
 * Но я могу и переопределить эти методы в классах Sniper и XBowMan.
 * =====================================================================================================
 * Задача:
 * Доделать мою программу, чтобы можно было простым конструктором (только name) создавать экземпляры 
 * персонажей (7 шт.).
 * И добавить интерфейс в котором, будут описанно два метода (getInfo, step).  
 * Метод getInfo - реализовать и переопределить в каждом классе, чтобы он возвращал (Я "name class"!)
 * 
 * Создал папку HW_Program в ней Hero_game_v1
 */

package OOP_JAVA.seminars.sem_02.src;

import java.util.ArrayList;
import java.util.Random;

public class Main implements GameInterface{ 
    
    public static void main(String[] args){

        // Archer archer = new Archer(); // Чтобы создать экземпляр класса Archer.
        // archer. // Через точку видны доступные параметры и методы.

        // Human man = new Human();
        // man. // Видны только те параметры, которые объявлены в классе.
        // Подчеркивает красным, т.к. в классе стоит слово abstract.

        // XBowMan man = new XBowMan("God");

        Sniper man = new Sniper("Иван");
        XBowMan man1 = new XBowMan(1.0f, 1, 2, 3, 5, 5, 5, 5, "");
        
        System.out.println(man.getInfo());
        System.out.println(man1.getInfo());

        ArrayList<Human> list = new ArrayList<>();
        list.add(new XBowMan(getName()));
        list.get(0).step();

        // Human.getHumanCnt(); 
// вызываю метод прям из класса (Human.), не создавая экземпляр класса, т.к. поле static getHumanCnt().
// Не видно humanCnt, т.к. он private, поставлю public будет виден.
// Если уберу private и static, то не будет видно. Видно только статические методы, переменные.

    //     for (int i = 0; i < 10; i++) {
    //         System.out.println(getName());            
    //     }
    }

    private static String getName() {
        String name = String.valueOf(Names.values()[new Random().nextInt(Names.values().length-1)]);
        return name;
    }

    @Override
    public void step(){}

    @Override
    public String getInfo(){return "Я человек!";}

}
