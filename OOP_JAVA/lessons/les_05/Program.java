/**
 * Урок 5. ООП: От простого к практике
 * ===============================================================================
 * Разговор о трех задачах.
 * 
 * Задача 1
 * Написать программу сложения двух чисел.
 * Почти как раньше, но лучше!
 * ------------------------------------------------------------------------------
 * Условно всё приложение делиться на три большие компонента.
 * Первая компонента отвечает, то как работать с интерфейсом, то что взоимодействует 
 * с пользователем.
 * Вторая компонента это то в себе содержит основную логику работы (модель) 
 * приложения в целом.
 * Третья копонента это призенетер, который связывает эти две компоненты между собой.
 * 
 * mvp.png - иерархия.
 * Плюс от такой иерархии, что можно переписывать (улучшать) компоненты по отдельности.
 * 
 * CalcModel.java - описал абстрактный класс CalcModel, который реализует интерфейс Model
 * 
 * Model.java - интерфейс
 * В себе содержит три метода
 * 
 * SumModel.java - описал класс, который позволяет получить результат.
 * В себе содержит метод, для вычисления и для задания значения у X и у Y.
 * 
 * View.java - описал класс, который позволяет работать с терминалом.
 * Внутри содержиться логика, как считывать данные и выводить данные в терминал.
 * 
 * Presenter.java - который знает, что будет работать с некой моделью (Model model) и 
 * каким-то представлением (View view).
 * В конструктор, передаю две эти компоненты, т.к. знаю, что они будут.
 * Следующий метод buttonClick() - нажимаю на неё пользователь запускает весь процесс.
 * 
 * Program.java - клиентский код (точка входа).
 * Создаю объект (p) типа Presenter и передаю в качестве параметров конструкторы SumModel и View.
 * -------------------------------------------------------------------------------
 * 
 * Задача 2
 * Написать программу, имитирующую работу записной книжки.
 * В программе можно:
 * - создать контакт
 * - увидеть контакт
 * - удалить контакт
 * - обновить контакт
 * Реализовать навигацию по меню.
 * Ps: Нужно уточнять как удалить, как обновить, это придет с опытом.
 * ------------------------------------------------------------------------------------------
 * Тут важным моментом явзяется разбиение на две основные части.
 * Первая часть приложения ядро (Core), т.е. то что отвечает за всю механику.
 * Вторая часть (Client) отвечает за взоимодействие с терминалом, т.е. что будет произходить на
 * стороне клиента. Речь не идет о клиент-серверном приложении, тут есть основная библиотека и ей 
 * кто-то пользуется.
 * 
 * Config.java - тут есть статическое поле, хнанящее в себе информацию (path) о базе данных.
 * 
 * Core - ядол приложение, в котором, папки.
 * Infrastructure - Phonebook.java  - это некий инфраструктурный модуль.
 * Phonebook - класс записная книжка. 
 * В ней есть механика, создания, чтения, обнавления, удаления и т.д.
 * 
 * Определение модели, Models - Contact.java - тут речь идет о модели не в контексте MVP патерна,
 * а в контексте данных. 
 * В нем я указываю большое количество полей, для Contact (date, firstName, lastName, company, phone и т.д.).
 * Далее MVP.
 * Model.java - тут есть модель, она работает с запясной книжкой. В рамках него есть логика работы.
 * public Model(String path) - path - путь до файла. 
 * public Contact currentContact() - получение информации о контакте (индекс) я буду знать какой контакт выбран.
 * public void load() - логика загрузки данных.
 * public void save() - логика сохранения данных.
 * public Phonebook currentBook() - получение всей текущей записной книжки.
 * public int getCurrentIndex() - получение текущего индекса.
 * public void setCurrentIndex() - запись, если мне нужно изменить текущий индекс.
 * 
 * View.java - прописан механизм получения, указания getFirstName(), getLastName(), setDescription() - описание.
 *  
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * Это пример, в решении реальной задачи где задействовано больше полей, лучше иерархию взоимодействия 
 * перенести в Интерфейс.
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * 
 * Presenter.java - знает о существовании private Model model и private View view.
 * В конструктору в качестве аргумента принемает View view и String pathDb (путь до базы данных).
 * public void LoadFromFile() - логика загрузки данных.
 * 
 * Напоминаю: Presenter связывает модель с конкретным представлением View.
 * 
 * public void add() - метод добавления.
 * public void remove() - метод удаления.
 * public void saveToFile() - сохранение данных.
 * public void next() - переключение к следующей записи.
 * public void prev() - переключение к предыдущей записи.
 * 
 * UI - основные классы позволяющие работать с терминалом.
 * ConsoleView.java - public class ConsoleView implements View - и как-то описанна логика.
 * 
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * Если мне не нравиться и я придумал как описать по другому, вот заготовка NewConsoleView.java 
 * public class NewConsoleView extends ConsoleView - 
 * В нем представлен пример, как можно перегрузить метод public void setDescription()
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * 
 * Client - Program.java - клиентский код. Описываю класс Program в нем метод main и всё что нужно сделать
 * сделать обращение к APP.ButtonClick() - для запуска приложения.
 * 
 * App.java - тут идея создания конкретного View (View view = new NewConsoleView();)
 * -------------------------------------------------------------------------------------------
 * 
 * Задача 3
 * Напишите программу для поставки внешним клиентам, которая умеет
 * вычислять площадь круга по радиусу и прямоугольника по трем сторонам.
 * Дополнительно к работоспособности оценим:
 * - легкость добавления других фигур
 * - вычисление площади фигуры без знания типа фигуры
 * - обработку возникающих проблем при создании фигур
 * И подешевле!
 * ----------------------------------------------------------------------------------
 * Это реальный пример задачи на собеседовании.
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * 
 * Shape.java - Базовая фигура (public abstract class Shape).
 * abstract (модификатор видимости) - закрываю, чтобы небыло возможности создать "голую фигуру".
 * Есть два поля, area (площадь) и name.
 * public double getArea() - метод получения площади.
 * protected void setArea(double value) - изменение площади. Он должен быть protected (скрыт-защищен), 
 * от изменения.
 * public void setNane(String value) - изменение, задание имени.
 * public String getNane() - получения имени.
 * 
 * Далее код: в моей фигуре можно хранить другие фигуры.
 * 
 * Идея фигура может содержать в себе перечень таких же фигур 
 * (public List<Shape> shapes = new ArrayList<Shape>();).
 * private void Print(StringBuilder sb, String indent) - метод печати.
 * 
 * @Override
 * public String toString() - делаю перегрузку метода и делаю вызов метода Print, а он уже будет проходить
 * рекурсивно и выбирать всё что нужно.
 * 
 * Square.java - тут можно описать фигуру типа крадрат.
 * 
 * Circle.java - тут я описал окружность, которая является наследником базовой фигуры (extends Shape).
 * public double radius; - радиус.
 * private Circle(){} - конструктор, который приватный.
 * public double getRadius(){return radius;} - получение радиуса.
 * 
 * @Override
 * public double getArea() { return Math.pow(radius, 2) * Math.PI; } - перегрузка метода получения площади.
 * 
 * public static Circle create(double radius, String name) throws UnacceptableValueException - статический 
 * метод (конструктор), который позволяет создавать экземпляры класса Circle.
 * Далее обработка Exception (ошибка) ввода.
 * Для этого нужно описать исключения самому.
 * 
 * Exceptions - MathematicsException.java - сам описываю исключение, что нужно сделать.
 * MathematicsException.java - public class UnacceptableValueException extends MathematicsException - исключение
 * не валидные данные в рамках MathematicsException, а он наследует Exception.
 * 
 * Далее в момент создания.
 * if (radius < 0) - если пользователь дает отрицательный радиус, то приложение покажет ошибку и вылетит.
 * Конечно, это не правильно, должно быть по другоме, но это пример!
 * 
 * var instance = new Circle(); - создаю экземпляр класса Circle, и указываю аргументы. 
 * 
 * Далее создал вторую фигуру прямоугольник.
 * Rectangle.java - наследует базовый класс Shape. 
 * Есть два поля. 
 * Далее конструктор, который создает экземпляр (var instance) класса Rectangle
 * 
 * Самостоятельно подумать над добавлением фигуры типа:
 * Square - квадрат
 * Triangle - треугольник
 * 
 * Квадрат является прямоугольником у которого ширина равна высоте.
 * ?????????????????????????????????????????????????????????????????????????????????????????????
 * Вопрос: Как продумать иерархию, квадрат будет наследником прямоугольника или наоборот?
 * ?????????????????????????????????????????????????????????????????????????????????????????????
 * 
 * Canvas.java - следующая фигура.
 * Выделил специальную сущность, чтобы иметь возможность хранить в ней все мои фигуры. 
 * Можно не создавать особую, а взять любую фигуру и в ней хранить все остальные.
 * 
 * Далее я описываю интерфейс
 * CalculateArea - Calculate.java - который содержит в себе один метод принемающий фигуру.
 * 
 * CalculateArea.java - передставитель, который умеет проходить по всем фигурам (public double visit(Shape shape)
 * и считать площадь всех фигур.
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * private class RefInt() - Описал класс внутри класса.
 * ОН private, чтобы никто не мог его вызвать, кроме этого  участка кода, в котором он нужен.
 * 
 * Client - Program.java - клиентский код.
 * Тут показано как можно делать вложение фигур в фигуры.
 * 
 * Core - структура MVP.
 * Infrastructure - Generator.java - инфраструктурный модуль, который содержит в себе гинерацию случайных чисел.
 * 
 * Models - Model - некая модель, которая позволяет взоимодействовать с фигурами и передовать способ расчета 
 * в момент создания фигуры.
 * 
 * Views - View.java - имеет два поля, может получить информацию строкой или выдать строкой.
 * 
 * Presenters - Presenter.java - содержит информацию о Model и View.
 * Конструктор.
 * Метод .append() - которой является надстройкой на методом добавления моей модели.
 * 
 * ConsoleView.java - описываю конкретного представителя ConsoleView.
 * 
 * App.java - условная компонента, которая собирает все приложение.
 * Тут создается экземпляры классов Presenter, View, Model.
 * 
 */

