/** 
 *  Урок 2. Почему вы не можете не использовать API.
 * ---------------------------------------------------------------------------------------------
 * API - сторонний сервис, по типу API Telegram.
 * Что такое API:
 * API (Application programming interface) — это контракт, который предоставляет программа.
 * «Ко мне можно обращаться так и так, я обязуюсь делать то и это».
 * Ссылка: https://habr.com/ru/post/464261/
 * -------------------------------------------------------------------------------------------
 * Что такое API для нас:
 * Это возможности, который предоставляют разработчики языка для удобного взаимодействия с его функционалом.
 * Пример:
 * 1. Строки
 * 2. Работа с файловой системой
 * 3. Логирование
 * 4. Импорт
 * 5. Xml

*/
// ===========================================================================================
// String (Пример работы со строками.)
// Создать строку из 1 млн плюсиков. Как?

package lessons.java_projects_02;

/**
 * Innerprogram
 */
// public class Program {
//     public static void main(String[] args) {

//         var s = System.currentTimeMillis();

//         // String str = "";
//         // for (int i = 0; i < 1_000_000; i++) { // Будет переполнение типа (ошибку не выдает), т.к. String.
//         //     str += "+";
//         // }

//         // ≈41000 ms - скорость выполнения кода.


//         StringBuilder sb = new StringBuilder(); // StringBuilder - при переполнении типа автоматически увиличивает размер.
//         for (int i = 0; i < 1_000_000; i++) {
//             sb.append("+");
//         }

//         System.out.println(System.currentTimeMillis() - s);
//         // System.out.println(str);
//         System.out.println(sb);
//         // ≈9 ms - скорость выполнения кода.
//     }
    
// }

/**
 * Методы String
 * 
 * concat(): объединение строк.
 * valueOf(): преобразует Object в строковое представление (завязан на toString()).
 * join(): объединяет набор строк в одну с учетом разделителя.
 * charAt(): получение символа по индексу.
 * indexOf(): первый индекс вхождения подстроки.
 * lastIndexOf(): последний индекс вхождения подстроки.
 * startsWith()/endsWith(): определяет, начинается/заканчивается ли строка с подстроки.
 * replace(): замена одной подстроки на другую.
 * trim(): удаляет начальные и конечные пробелы.
 * substring(): возвращает подстроку, см.аргументы.
 * toLowerCase()/toUpperCase(): возвращает новую строку в нижнем/верхнем регистре.
 * сompareTo(): сравнивает две строки.
 * equals(): сравнивает строки с учетом регистра.
 * equalsIgnoreCase(): сравнивает строки без учета регистра.
 * regionMatches(): сравнивает подстроки в строках.
 */
// -------------------------------------------------------------------------------------------------
/**
 * Program
 */
// Как набор символов превратить в строку и наоборот.

// public class Program {

//     public static void main(String[] args) {
//         String[] name = { "C", "е", "р", "г", "е", "й" };
//         String sk = "СЕРГЕЙ КА.";
//         System.out.println(sk.toLowerCase()); // сергей ка.
//         System.out.println(String.join("", name)); // Cергей
//         System.out.println(String.join("", "C", "е", "р", "г", "е", "й")); // Cергей
//         System.out.println(String.join(",", "C", "е", "р", "г", "е", "й")); // C,е,р,г,е,й
//     }
// }
// -----------------------------------------------------------------------------------------------
/**
 * Какой тип данных лучше использовать?
 * String vs StringBuilder
 * Много изменений – String
 * Много преобразований – StringBuilder
 */
// ================================================================================================
/**
 * Работа с файловой системой.
 * 
 * Сколько разного в файловой системе?
 * Ответ: Каталоги и файлы.
 * ----------------------------------------------------------------------------------------------
 * Для работы нужно:
 * File <имя> = new File(<полный путь к файлу>); // File - это один большой тип.
 * File f1 = new File("file.txt"); // Инициализация типо данных фаил. Относительная маршрутизация, это
 * когда я указываю имя файла.
 * File f2 = new File("/Users/sk/vscode/java_projects/file.txt"); // Обсолютная маршрутизация, когда я 
 * указываю полный путь до файла.
 * Что предпочтительнее?
 * Создал фаил fileSystemDemo.java
 * Чтобы не было ошибок при запуске программы на разных операционных системах при описании пути к файлу 
 * используют методы этого класса.
 */ 
// ===============================================================================================
/**
 * Работа с файловой системой. ФАЙЛЫ. Ошибки.
 * ------------------------------------------------------------------------------------------------
 * Методы:
 * isHidden(): возвращает истину, если каталог или файл является скрытым.
 * length(): возвращает размер файла в байтах.
 * lastModified(): возвращает время последнего изменения файла или каталога.
 * list(): возвращает массив файлов и подкаталогов, которые находятся в каталоге.
 * listFiles(): возвращает массив файлов и подкаталогов, которые находятся в определенном каталоге.
 * mkdir(): создает новый каталог.
 * renameTo(File dest): переименовывает файл или каталог.
 * ---------------------------------------------------------------------------------------------
try {
 Код, в котором может появиться ошибка
} catch (Exception e) {
 Обработка, если ошибка случилась
}
finally {
 Код, который выполнится в любом случае
}
 * Создал фаил tryDemo.java
 * 
 * PS: Лучше не использовать блоки tru-catch.
 */
// ------------------------------------------------------------------------------------------------
/**
 * Работа с файловой системой. КАТАЛОГИ.
 * Создал фаил catalogSystemDemo.java
 */
// ==================================================================================================
/**
 * Бинарные файлы или двоичные файлы.
 * Создал новый проект java_projects_02_1
 * ================================================================================================
 * Логирование:
 * Логи содержат системную информацию работы программного или аппаратного комплекса.
 * В них записываются действия разного приоритета от пользователя, или программного продукта.
 * Процесс ведения логов называют “логированием” (журналированием)
 */
/**
 * Логирование. Использование. Основы.
 * Использование
 * Logger logger = Logger.getLogger()
 * Уровни важности
 * INFO, DEBUG, ERROR, WARNING и др.
 * Вывод
 * ConsoleHandler info = new ConsoleHandler();
 * log.addHandler(info);
 * Формат вывода: структурированный, абы как*
 * XMLFormatter, SimpleFormatter
 */

 
